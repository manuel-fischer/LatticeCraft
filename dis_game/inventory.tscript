#[section] base
namespace inventory
{	
	var hotbarSize = 10;
	var backpackSize = 10*5;
	var inventorySize = hotbarSize + backpackSize;

	function makePlayerInventory()
	{
		return Array(inventorySize, null);
	}
	
	class ItemStack
	{
	public:
		var amount;
		var item;
		
		constructor(amount, item)
		{
			this.amount = amount;
			this.item   = item;
		}
		function copy()
		{
			return ItemStack(amount, item);	
		}
		
		function increase(amount=1)
		{	
			this.amount += amount;
			return false;
		}
		
		function decrease(amount=1)
		{
			assert(this.amount >= amount);
			this.amount -= amount;
			if this.amount > 0 then return false;
			return true;
		}
		
		# renders item but not amount
		function renderItem()
		{
			item.renderItem();
		}
		
	}
	
	namespace util {
		
		# returns [li, ti, ri, bi] -- the boundaries of occupied slots,
		# [li, ri)
		# [ti, bi)
		function occupiedRect(slots, xd, yd)
		{
			#assert(slots.size() == xd*yd, "slots should be array of length xd*yd");
		
			# 1. find out left most, top most, right most, bottom most filled slot
			var li = xd, ti = yd, ri = 0, bi = 0;
			var hasNonNull = false;

			var i = 0;
			for var y in 0:yd do
			for var x in 0:xd do
			{
				var slot = slots[i];

				if slot != null then
				{
					li = math.min(li, x);
					ti = math.min(ti, y);
					ri = math.max(ri, x);
					bi = math.max(bi, y);
					hasNonNull = true;
				}

				i += 1;
			}
			if hasNonNull then return [li, ti, ri+1, bi+1];
			return null;
		}
		
	}
	
}

#[section] main
namespace inventory
{
	use namespace disp;	
	
	var hotbarDirty = true;
	
	var hotbarIndex = 0;
	var slots;
	
	
	var hotbL, hotbT, hotbR, hotbB, hotbOff;
	var guiRegionY;
	
	# constant, do not change
	var hotbAllDirty = { "0": 0, "1": 1, "2": 2, "3": 3, "4": 4,
	                     "5": 5, "6": 6, "7": 7, "8": 8, "9": 9 };
	
	var hotbDirty = {};
	
	
	function bindEntityInventory(entityWithInventory)
	{
		slots = entityWithInventory.inventorySlots;
			
		entityWithInventory.onInventorySlotChanged = function(i, itemstack)
		{
			if i < hotbarSize then hotbDirty[String(i)] = i;
		};
	}
}


namespace inventory {
	
	function markCompletelyDirtyScreen()
	{
		hotbarDirty = true;
	}
	
	
	function selectSlot(index) {
		if hotbarIndex == index then return;
		
		hotbDirty[String(index)] = index;
		hotbDirty[String(hotbarIndex)] = hotbarIndex;
		
		hotbarIndex = index;
	}
	
	namespace dispHotbar
	{
		var scl;
		
		var hotOff;
		var hx, hy, w;
	}
	
	namespace dispItem
	{
		function renderAmount(item)
		{
			use namespace dispHotbar;
			
			if item.amount > 1 then
			{
				var amountStr = String(item.amount);

				if item.amount > 99 then
				{
					canvas.setFont("helvetica", gui.guiScale*1/2);
					# bold font, by multiple rendering
					canvas.text(0, 0.0625*scl, amountStr);
					canvas.text(0.25*0.0625*scl, 1.25*0.0625*scl, amountStr);
					canvas.setFont("helvetica", gui.guiScale*2/3);
				}
				else
					canvas.text(0, 0, amountStr);
			}
		}	
	}
	
	function initHotbar()
	{
		use namespace dispHotbar;
		dispHotbar.scl = gui.guiScale * 1; #1.125;
		
		var px = 0.0625; #0.1; #0.0625;
		var dd = px*scl;
		
		dispHotbar.hotOff = 1+2*px; # 2*1/16 on each side
		
		dispHotbar.hy = canvas.height() - gui.guiScale*1.75;
		dispHotbar.w = hotbarSize*hotOff - hotOff + 1;
		dispHotbar.hx = (canvas.width() - scl*w) / 2;
		
		#updating static values, TODO: this is shitty code
		hotbOff = hotOff*scl;
		hotbL = hx-dd;
		hotbT = hy-dd;
		hotbR = hotbL + hotbOff*hotbarSize;
		hotbB = hy+scl+dd;
		
		guiRegionY = canvas.height() - gui.guiScale*2.75;
	}
	
	function renderHotbar()
	{
		use namespace dispHotbar;
		if hotbarDirty then hotbDirty = hotbAllDirty;
		else if hotbDirty.size() == 0 then return;
		
		initHotbar();
		
		canvas.reset();
		canvas.shift(hx, hy);
		canvas.scale(scl);
		
		var ttX = 0;
		for var i in hotbDirty.values() do
		{
			var x = hotOff*i;
			canvas.shift(x-ttX, 0); ttX = x;
			if i == hotbarIndex then
				canvas.setFillColor(1, 1, 1, 1);
			else
				canvas.setFillColor(0.4, 0.4, 0.4, 1);
				
			canvas.fillRect(-0.0625, -0.0625, 1.125, 1.125);
			canvas.setFillColor(0.3, 0.3, 0.3, 1);
			canvas.fillRect(0, 0, 1, 1);
			var b = slots[i];
			if b != null then b.renderItem();
			
		}
		
		# draw amount
		canvas.shift(-ttX, 0);
		canvas.scale(1/scl);
		
		canvas.setTextAlign("right");
		canvas.setFont("helvetica", gui.guiScale*2/3);
		var px = scl*0.0625;
		canvas.shift(px*15, px*7);
		for var k in 0:2 do
		{
			var lastX = 0;
			canvas.setFillColor(k, k, 0.5);
			for var i in hotbDirty.values() do
			{
				canvas.shift((i-lastX)*hotOff*scl, 0);
				lastX = i;
				if slots[i] == null then continue;
				dispItem.renderAmount(slots[i]);
			}
			canvas.shift(-px-lastX*hotOff*scl, -px);
		}
		# end draw amount
		
		hotbDirty = {};
		hotbarDirty = false;
	}
	
	dispWorld.markDirtyGuiCB = function(x, y)
	{
		if y*dispScale+dispScale >= hotbT and y*dispScale <= hotbB then
		{
			var xx  = x*dispScale-hotbL;
			var xxl = xx+dispScale;
			var xxr = xx-hotbOff;
			for var i in 0:hotbarSize do
			{
				if xxl > i*hotbOff and xxr < i*hotbOff then
					hotbDirty[String(i)] = i;
			}
		}
	};
	
	function isOnGui(x, y)
	{
		return y >= guiRegionY;	
	}
	
	function onMouseDown(x, y)
	{
		if y >= hotbT then if y < hotbB then
		if x >= hotbL then if x < hotbR then
		{
			selectSlot(Integer((x-hotbL) // hotbOff));
		}
		
	}
	
	
	function useCurrent()
	{
		if slots[hotbarIndex] != null then
		{
			if slots[hotbarIndex].decrease() then
			{
				slots[hotbarIndex] = null;
			}
			
			hotbDirty[String(hotbarIndex)] = hotbarIndex;
		}
	}
	
}
# namespace inventory










#[section] gui.GuiInventory
namespace gui
{
	
	class ItemPanel : Control
	{
	public:
		var slots;
		var cols, rows;
		var focusedSlot = null; # currently hovered slot
		var selectedSlot = null; # currently selected slot
		var onItemSelect; # return true to select slot,
		                  # return false to keep previous selected
						  # return null to remove selection
		var onItemDeselect;
		var slotHighlightFunc;
		
		var slotsDirty;
		
		constructor(slots, cols, rows, x=0, y=0,
					onItemSelect=null, onItemDeselect=null, slotHighlightFunc=null)
			: super(x=x, y=y, width=cols*1.125, height=rows*1.125)
		{
			this.slots = slots;
			
			this.cols = cols;
			this.rows = rows;
			
			if onItemSelect == null then
				this.onItemSelect = function(self, index, stack, button) { return true; };
			else
				this.onItemSelect = onItemSelect;
				
			if onItemDeselect == null then
				this.onItemDeselect = function(self, button) {};
			else
				this.onItemDeselect = onItemDeselect;
			
			if slotHighlightFunc == null then
				this.slotHighlightFunc = function(i) { return false; };
			else
				this.slotHighlightFunc = slotHighlightFunc;
				
			slotsDirty = {};
		}
		
		function markSlotDirty(i)
		{
			if i != null then slotsDirty[String(i)] = i;
		}
		
		
		
		function handleItemSelect(slotIndex, button)
		{
			return onItemSelect(this, slots, slotIndex, button);
		}
		
		function handleItemDeselect(button)
		{
			return onItemDeselect(this, button);	
		}
		
		
		function onMouseMove(event)
		{
			# cell size;
			var sc = 1.125*guiScale;
			var xx = (event.x-this.x*guiScale) // sc;
			var yy = (event.y-this.y*guiScale) // sc;
			var newSlot = null;
			if 0 <= xx then if xx < cols then
			if 0 <= yy then if yy < rows then
			{
				newSlot = Integer(xx + yy*cols);
				
				if newSlot >= slots.size() then newSlot = null;
			}
			
			if newSlot != focusedSlot then
			{
				markSlotDirty(focusedSlot);
				markSlotDirty(newSlot);
				focusedSlot = newSlot;
				return true;
			}
		}
		
		function onLostFocus()
		{
			if focusedSlot != null then
			{
				markSlotDirty(focusedSlot);
				focusedSlot = null;
				return true;
			}
		}
		
		function onMouseDown(event)
		{
			# cell size;
			var sc = 1.125*guiScale;
			var xx = (event.x-this.x*guiScale) // sc;
			var yy = (event.y-this.y*guiScale) // sc;
			var newSlot = null;
			if 0 <= xx then if xx < cols then
			if 0 <= yy then if yy < rows then
			{
				newSlot = Integer(xx + yy*cols);
				
				if newSlot >= slots.size() then newSlot = null;
			}
				
			if newSlot != selectedSlot and newSlot != null then
			{
				markSlotDirty(selectedSlot);
				markSlotDirty(newSlot);
				var chgx = handleItemSelect(newSlot, event.button);
				if chgx == null then
					selectedSlot = null;
				else if chgx == true then
					selectedSlot = newSlot;
				return true;
			}
			else
			{
				markSlotDirty(selectedSlot);
				handleItemDeselect(event.button);
				selectedSlot = null;
				return true;
			}	
		}
		
		function onKeyDown(event)
		{
			var isEnter = event.key == "Enter";
			var isSpace = event.key == " ";
			if isEnter or isSpace then
			{
				var simButton = "left";
				if isSpace then simButton = "right";
				
				if selectedSlot != focusedSlot then
				{
					markSlotDirty(selectedSlot);
					markSlotDirty(focusedSlot);

					var chgx = handleItemSelect(focusedSlot, simButton);
					if chgx == null then
						selectedSlot = null;
					else if chgx == true then
						selectedSlot = focusedSlot;
					return true;
				}
				else
				{
					markSlotDirty(selectedSlot);
					handleItemDeselect(simButton);
					selectedSlot = null;
					return true;
				}
			}	
			
			var newSlot = focusedSlot;
			if newSlot == null then newSlot = 0;
			
			if event.key == "ArrowLeft" then
				newSlot = math.max(0, newSlot-1);
			else if event.key == "ArrowRight" then
				newSlot = math.min(newSlot+1, slots.size()-1);
			else if event.key == "ArrowUp" then
				newSlot = math.max(0, newSlot-cols);
			else if event.key == "ArrowDown" then
				newSlot = math.min(newSlot+cols, slots.size()-1);
			
			if newSlot != focusedSlot then
			{
				markSlotDirty(focusedSlot);
				markSlotDirty(newSlot);
				focusedSlot = newSlot;
				return true;
			}
		}
		
		
		function render(parentDirty)
		{
			if not parentDirty and slotsDirty.size() == 0 then return;
			
			var gs = guiScale;
			var sc = 1.125*gs;

			doCanvasShift();
			#draw boxes
			var scl = guiScale;
			var px = scl*0.0625;
			canvas.shift(px, px);
			
			var renderBackground = function[scl, focusedSlot, slotHighlightFunc](i)
			{			
				if i == focusedSlot then
					canvas.setFillColor(1, 1, 1, 1);
				else if slotHighlightFunc(i) then
					canvas.setFillColor(0.3, 0.3, 0.3, 1);
				else
					canvas.setFillColor(0.15, 0.15, 0.15, 1);
				
				canvas.fillRect(-0.0625*scl, -0.0625*scl, 1.125*scl, 1.125*scl);
				canvas.setFillColor(0.1, 0.1, 0.1, 1);
				canvas.fillRect(0, 0, scl, scl);
			};
			
			if parentDirty then
			{
				var x = 0, y = 0;
				for var i in slots.keys() do
				{
					renderBackground(i);

					x += 1;
					canvas.shift(sc, 0);
					if x >= cols then {
						x = 0; y += 1;
						canvas.shift(-sc*cols, sc);
					}
				}
				canvas.shift(-sc*x, -sc*y);

				#draw items
				x = 0; y = 0;
				for var i in slots.keys() do
				{
					var b = slots[i];

					if b != null then
					{
						canvas.scale(scl);
						b.renderItem();
						canvas.scale(1/scl);
					}


					x += 1;
					canvas.shift(sc, 0);
					if x >= cols then {
						x = 0; y += 1;
						canvas.shift(-sc*cols, sc);
					}
				}
				canvas.shift(-sc*x, -sc*y);

				# draw amount

				canvas.setTextAlign("right");
				canvas.setFont("helvetica", gui.guiScale*2/3);
				canvas.shift(px*15, px*7);
				for var k in 0:2 do
				{
					canvas.shift(-k*px, -k*px);
					x = 0; y = 0;
					canvas.setFillColor(k, k, 0.5);

					for var i in slots.keys() do
					{
						var b = slots[i];

						if b != null then inventory.dispItem.renderAmount(b);

						x += 1;
						canvas.shift(sc, 0);
						if x >= cols then {
							x = 0; y += 1;
							canvas.shift(-sc*cols, sc);
						}
					}
					canvas.shift(-sc*x, -sc*y);
					canvas.shift(k*px, k*px);
				}
				canvas.shift(-px*15, -px*7);
				# end draw amount

			}
			else
			{
				var lastX=0, lastY=0;
				for var i in slotsDirty.values() do
				{
					var x = i % cols, y = i // cols;
					canvas.shift(sc*(x-lastX), sc*(y-lastY));
					lastX = x; lastY = y;
					
					var b = slots[i];

					renderBackground(i);
					if b != null then
					{
						canvas.scale(scl);
						b.renderItem();
						canvas.scale(1/scl);	
						if b.amount > 1 then
						{
						
							canvas.setTextAlign("right");
							canvas.setFont("helvetica", gui.guiScale*2/3);
							canvas.shift(px*15, px*7);
							for var k in 0:2 do
							{
								canvas.setFillColor(k, k, 0.5);
								canvas.shift(-k*px, -k*px);
								inventory.dispItem.renderAmount(b);
								canvas.shift(k*px, k*px);
							}
							canvas.shift(-px*15, -px*7);
						}
					}
					
				}
				canvas.shift(-sc*lastX, -sc*lastY);
			}
			canvas.shift(-px, -px);
			
			slotsDirty = {};
			
			if selectedSlot != null then
			{
				var sX = selectedSlot %  cols;
				var sY = selectedSlot // cols;
				var l = math.sin(time()/300)*0.3+0.5;
				canvas.setFillColor(1, 1, 1, l);
				canvas.fillRect(sc*sX, sc*sY, sc, sc);
				markSlotDirty(selectedSlot);
			}
			
			undoCanvasShift();
		}
		
		function onTimer(event)
		{
			if selectedSlot != null then return true;
		}
	}
	# class ItemPanel
	
	
	class GuiInventory : ModalDlg
	{
	public:
		var entity;
		var slots;
		var selectedPanel, selectedSlotIndex;
		var panCrafting, panCrafted;
		
		constructor(caption, entity, width, height, controls, panCrafting, panCrafted)
			: super(
				caption=caption,
				width=width, height=height,
				controls=controls
			)
		{
			this.entity = entity;
			
			if panCrafting != null then
			{
				this.panCrafting = controls[panCrafting];
				this.panCrafted = controls[panCrafted];
			}
		}
		
		
		# only called, when panCrafting is given
		function updateRecipe() {}
		function onCraft(panCtrl, slots, slotIndex, button) {}
			
		# Selection of the crafted slot
		function panelOnItemSelectX(panCtrl, slots, slotIndex, button)
		{
			if selectedPanel != null then
			{
				selectedPanel.markSlotDirty(selectedSlotIndex);
				selectedPanel.selectedSlot = null;
				markDirtyCtrl(selectedPanel);
			}
			
			selectedPanel = panCtrl;
			selectedSlotIndex = slotIndex;
			return true;
		}
		
		function panelOnItemSelect(panCtrl, slots, slotIndex, button)
		{
			if selectedPanel == null then
			{
				# Select new slot
				selectedPanel = panCtrl;
				selectedSlotIndex = slotIndex;
				return true;
			}
			else if selectedPanel.slots[selectedSlotIndex] == null then
			{	
				# Select new slot, old selected slot was empty
				selectedPanel.markSlotDirty(selectedSlotIndex);
				selectedPanel.selectedSlot = null;
				markDirtyCtrl(selectedPanel);
				
				selectedPanel = panCtrl;
				selectedSlotIndex = slotIndex;
				return true;
			}
			else
			{
				# Move slot contents
				
				var a = panCtrl.slots[slotIndex];
				var b = selectedPanel.slots[selectedSlotIndex];
				#assert(b != null);
				
				if panCrafted != null then
				if selectedPanel == panCrafted then
				{
					# subclass call
					this.onCraft(panCtrl, slots, slotIndex, button);
					return;
				}
				
				{
					assert(b != null);
					# Move slot contents to new slot
					var keepSelection = false;

					var a = panCtrl.slots[slotIndex];
					var b = selectedPanel.slots[selectedSlotIndex];
					var addItemAmount = false;
					if a != null and b != null and a != b then addItemAmount = a.item == b.item;

					if addItemAmount then
					{
						if button == "right" then
						{
							if selectedPanel.slots[selectedSlotIndex].decrease() then
								selectedPanel.slots[selectedSlotIndex] = null;
							panCtrl.slots[slotIndex].increase(1);
							keepSelection = true;
						}
						else
						{
							selectedPanel.slots[selectedSlotIndex] = null;
							panCtrl.slots[slotIndex].increase(b.amount);	
						}
					}
					else
					{
						if button == "right" and a == null then
						{
							if selectedPanel.slots[selectedSlotIndex].decrease() then
								selectedPanel.slots[selectedSlotIndex] = null;
							panCtrl.slots[slotIndex] = inventory.ItemStack(1, b.item);
							keepSelection = true;
						}
						else
						{
							selectedPanel.slots[selectedSlotIndex] = a;
							panCtrl.slots[slotIndex] = b;
						}
					}

					selectedPanel.markSlotDirty(selectedSlotIndex);
					if not keepSelection then selectedPanel.selectedSlot = null;
					markDirtyCtrl(selectedPanel);

					panCtrl.markSlotDirty(slotIndex);
					markDirtyCtrl(panCtrl);

					this.updateRecipe();

					if not keepSelection then selectedPanel = null;
					return false; #null; # do not select slot
				}
			}
		}
		
		function panelOnItemDeselect(panCtrl, button)
		{
			selectedPanel = null;
		}
		
		function onMouseDownBack(event)
		{
			if selectedPanel != null then
			{
				selectedPanel.markSlotDirty(selectedPanel.selectedSlot);
				selectedPanel.selectedSlot = null;
				markDirtyCtrl(selectedPanel);
				selectedPanel = null;

				return true;
			}
		}
	}
	
	
	class GuiCraftingInventory : GuiInventory
	{
	public:
		var currentRecipe = null;
		var craftingCols, craftingRows;
		
		
		#nonsuper slots, hotbarSize, backpackSize, craftingCols, craftingRows
		constructor(caption, entity, slots, hotbarSize, backpackSize, craftingCols, craftingRows)
			: super(
				caption=caption,
				entity=entity,
				panCrafting="panCrafting",
				panCrafted="panCrafted",
				width=0.5 + 10*1.125 + 0.5, height=2.25+craftingRows*1.125+0.5+6*1.125+0.5,
				controls={
					panCrafting: ItemPanel(
						x=0.5 + 1.125*(10-2-craftingCols)/2, y=2.25,
						cols=craftingCols, rows=craftingRows,
						slots=Array(craftingCols*craftingRows),
						onItemSelect=this.panelOnItemSelect,
						onItemDeselect=this.panelOnItemDeselect
					),
					panCrafted: ItemPanel(
						x=0.5 + 1.125*((10-2-craftingCols)/2+craftingCols+1), y=2.25+1.125*(craftingRows-1)/2,
						cols=1, rows=1,
						slots=[null],
						onItemSelect=this.panelOnItemSelectX,
						onItemDeselect=this.panelOnItemDeselect
					),
					panInventory: ItemPanel(
						x=0.5, y=2.25+craftingRows*1.125+0.5,
						cols=10, rows=6,
						slots=slots,
						slotHighlightFunc=function[hotbarSize](index)
						{
							return index < hotbarSize;	
						},
						onItemSelect=this.panelOnItemSelect,
						onItemDeselect=this.panelOnItemDeselect
					),
				}
			)
		{
			this.entity = entity;
			this.slots = slots;
			this.craftingCols = craftingCols; this.craftingRows = craftingRows;
		}
		
		
		function updateRecipe()
		{
			if panCrafting == null then return;
			
			currentRecipe = recipes.getRecipe(panCrafting.slots, craftingCols, craftingRows);
			if currentRecipe == null then
				panCrafted.slots[0] = null;
			else
				panCrafted.slots[0] = currentRecipe.result.copy();
				
			panCrafted.markSlotDirty(0);
			markDirtyCtrl(panCrafted);
		}
		
		
		function onCraft(panCtrl, slots, slotIndex, button)
		{
			var a = panCtrl.slots[slotIndex];
			var b = selectedPanel.slots[selectedSlotIndex];
				
			# Selected slot is the crafted slot, move contents when possible
			#assert(currentRecipe != null); # slot should be nonempty only when recipe exists

			if a != null then if a.item != b.item then return; # different items

			# consume crafting ingredients
			#var panCrafting = controls["panCrafting"];
			recipes.consumeRecipe(panCrafting.slots, craftingCols, craftingRows, currentRecipe,
								  panCrafting.markSlotDirty);
			markDirtyCtrl(panCrafting);


			# move contents to new slot
			if a == null then
				panCtrl.slots[slotIndex] = b;
			else
				a.increase(b.amount);
			panCtrl.markSlotDirty(slotIndex);
			markDirtyCtrl(panCtrl);


			# update recipe
			this.updateRecipe();

			if button != "right" then 
			{
				selectedPanel.selectedSlot = null;
				selectedPanel = null;
			}
		}
		
		
		function onClose()
		{
			var panCrafting = controls["panCrafting"];
			for var s in panCrafting.slots do
			{
				if s != null then
				{
					entity.collectItem(s.item, s.amount);
				}
			}
		}
		
		
		function render(parentDirty)
		{
			super.render(parentDirty);
			
			if parentDirty then
			{
				# Draw Arrow
				doCanvasShift();
				var gs = guiScale*1.125;
				var xx = (0.5  + 1.125*((10-2-craftingCols)/2 + craftingCols))*guiScale;
				var yy = (2.25 + 1.125*(craftingRows-1)/2)*guiScale;
				canvas.shift(xx, yy);
				canvas.setFillColor(1, 1, 1);
				canvas.fillArea([[0.3*gs, 0.3*gs], [0.3*gs, 0.7*gs], [0.7*gs, 0.5*gs]]);
				canvas.shift(-xx, -yy);
				undoCanvasShift();
			}
		}
	}
	
	class GuiContainerInventory : GuiInventory
	{
	public:
	
		#nonsuper slots, hotbarSize, backpackSize, craftingCols, craftingRows
		constructor(caption, entity, slots, hotbarSize, backpackSize, containerSlots, containerCols, containerRows)
			: super(
				caption=caption,
				entity=entity,
				panCrafting=null,
				panCrafted=null,
				width=0.5 + 10*1.125 + 0.5, height=2.25+containerRows*1.125+0.5+6*1.125+0.5,
				controls={
					panContainer: ItemPanel(
						x=0.5 + 1.125*(10-containerCols)/2, y=2.25,
						cols=containerCols, rows=containerRows,
						slots=containerSlots,
						onItemSelect=this.panelOnItemSelect,
						onItemDeselect=this.panelOnItemDeselect
					),
					panInventory: ItemPanel(
						x=0.5, y=2.25+containerRows*1.125+0.5,
						cols=10, rows=6,
						slots=slots,
						slotHighlightFunc=function[hotbarSize](index)
						{
							return index < hotbarSize;	
						},
						onItemSelect=this.panelOnItemSelect,
						onItemDeselect=this.panelOnItemDeselect
					),
				}
			)
		{
			this.entity = entity;
			this.slots = slots;
		}
	}
}
# namespace gui



