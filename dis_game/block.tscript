class Block
{
public:
	static var registry = {};
	static var allTags = {};
	
	
	var char; # set by register

	var texture; # function()
	var render; # function()
	var drop;
	var dropChance;
	var tags; # block tags, that are boolean properties -> resulting in sets of blocks
			  # only true tags are kept, so that it results in a Dictionary that maps strings to true
			  # commonly used tags:
			  # - "solid": blocks where entities cannot walk/fall through
			  
	# these properties can be changed after the Block-object has been created
	# until the game has started up
	var tick; # function(x, y)
	var place; # function(x, y) -> Boolean
	var update; # function(x, y) or null
	var onClick; # function(x, y)
	var blockDataHandler; # like inventories for chests
	
	function renderItem()
	{ 
		textureState.renderSky = false;
		render();
		textureState.renderSky = true;
	}
	
	constructor(
		char_id,
		texture, 
		drop = true,
		dropChance = 1.0,
		tags = {solid: true}, # should be a Dictionary that maps to boolean values, or an array of strings
		tick=null,
		place=null,
		update=null,
		onClick=null,
		blockDataHandler=null
	) {
		this.register(char_id);
		
		this.render = texture;
		this.texture = texture;
		
		if drop == false then		this.drop = null;
		else if drop == true then	this.drop = this;
		else						this.drop = drop;
		
		this.dropChance = dropChance;
		
		this.registerTags(tags);
		
		if tick == null then
			this.tick = function(x, y) {};
		else
			this.tick = tick;
			
		if place == null then
			this.place = function[thisBlock = this](x, y) {
				theWorld.setBlockUpdate(x, y, thisBlock);
				return true;
			};
		else
			this.place = place;
			
		this.update=update;
		
		if onClick == null then
			this.onClick = function(x, y) {};
		else
			this.onClick = onClick;
			
		this.blockDataHandler = blockDataHandler;
	}

	function register(char_id)
	{
		if registry.has(char_id) then error("Character '" + char_id + "' already used");
		if this.char != null then error("Block already mapped to character");
		if char_id.size() != 1 then error("Block character should be of size 1");
		if "0" <= char_id and char_id <= "9" then error("Characters 0-9 reserved for numeric data"); # RLE and slot size in the inventory
		
		this.char = char_id;
		registry[char_id] = this;
		return this;
	}
	
	function addTag(tag)
	{
		this.tags[tag] = true;
		if allTags.has(tag) then
		{
			allTags[tag].push(this);
		}
		else
		{
			allTags[tag] = [this];
		}	
	}
	
	function registerTags(tags)
	{
		this.tags = {};
		if Type(tags) == Dictionary then
		{
			for var tag in tags.keys() do
			{
				if tags[tag] then addTag(tag);
			}
		}
		else if Type(tags) == Array then
		{
			for var tag in tags do
			{
				addTag(tag);
			}
		}
		else error("The tags parameter should be a Dictionary to Booleans or an Array of Strings");
	}
}
# class Block







