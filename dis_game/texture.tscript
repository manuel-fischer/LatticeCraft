
namespace textureState
{
	var renderSky = true;	
}

function divideElements(arr, val)
{
	var ret = [];
	for	var e in arr do
	{
		if Type(e) == Array then ret.push(divideElements(e, val));
		else ret.push(e/val);
	}
	return ret;
}

namespace texture
{
	
	function sky()
	{
		if textureState.renderSky then {
			canvas.setFillColor(0.5, 0.75, 1);
			canvas.fillRect(0, 0, 1, 1);
		}
	}
	
	function solid(color)
	{
		return function[color]()
		{
			canvasUtil.setFillColor(color);
			canvas.fillRect(0, 0, 1, 1);
		};
	}
	
	function solidBevel(color)
	{
		return function[color]()
		{
			canvasUtil.setFillColor(color);
			canvas.fillRect(0, 0, 1, 1);
			canvasUtil.bevel0011();
		};
	}
	
	function bevel(background)
	{
		return function[background]()
		{
			background();
			canvasUtil.bevel0011();
		};
	}
	
	
	#*function solidBevelGrown(color, grownColor)
	{		
		return function[color, grownColor]()
		{
			canvasUtil.setFillColor(color);
			canvas.fillRect(0, 0, 1, 1);
			
			canvasUtil.setFillColor(grownColor);
			canvas.fillRect(0, 0, 1, 0.25);
			canvas.setFillColor(0, 0, 0, 0.25);
			canvas.fillRect(1/16, 3/16, 14/16, 1/16);
			
			canvasUtil.bevel0011();
		};
	}*#
	
	function bevelBlocks(blocks, background)
	{		
		var bevelLightComp = [];
		var bevelDarkComp = [];
		for var b in blocks do
		{
			var x0 = b[0]/16, y0 = b[1]/16, x1 = b[2]/16, y1 = b[3]/16;
			canvasUtil.compBevel(bevelLightComp, bevelDarkComp, x0, y0, x1, y1);
		}
		var comp = util.arrayConcat([
			[background],
			[function() { canvas.setFillColor(1, 1, 1, 0.40); }],
			bevelLightComp,
			[function() { canvas.setFillColor(0, 0, 0, 0.15); }],
			bevelDarkComp,
		]);
		
		return function[comp]()
		{
			for var i in comp do i();
		};
	}
	
	function fillBlocks(color, blocks, background)
	{
		var fillComp = [];
		for var b in blocks do
		{
			var x0 = b[0]/16, y0 = b[1]/16, x1 = b[2]/16, y1 = b[3]/16;
			fillComp.push(function[x0, y0, x1, y1]() { canvas.fillRect(x0, y0, x1, y1); });
		}
		
		return function[color, fillComp, background]()
		{
			background();
			
			canvasUtil.setFillColor(color);
			for var i in fillComp do i();
		};
	}
	
	function blocks(color, blocks, background)
	{
		var fillComp = [];
		var bevelLightComp = [];
		var bevelDarkComp = [];
		for var b in blocks do
		{
			var x0 = b[0]/16, y0 = b[1]/16, x1 = b[2]/16, y1 = b[3]/16;
			fillComp.push(function[x0, y0, x1, y1]() { canvas.fillRect(x0, y0, x1, y1); });
			canvasUtil.compBevel(bevelLightComp, bevelDarkComp, x0, y0, x1, y1);
		}
		var comp = util.arrayConcat([
			fillComp,
			[function() { canvas.setFillColor(1, 1, 1, 0.40); }],
			bevelLightComp,
			[function() { canvas.setFillColor(0, 0, 0, 0.15); }],
			bevelDarkComp,
		]);
		
		return function[color, comp, background]()
		{
			background();
			
			canvasUtil.setFillColor(color);
			for var i in comp do i();
		};
	}
	
	
	function planks(color)
	{
		var blocks = [
			[ 0,  0, 16,  4],
			[ 0,  4,  8,  4], [ 8,  4,  8,  4],
			[ 0,  8, 16,  4],
			[ 0, 12,  8,  4], [ 8, 12,  8,  4],
		];
		
		return bevelBlocks(blocks, solid(color));
	}
	
	function log(color)
	{
		var l = [
			[ 0,  0,  1, 16],
			
			[ 5,  4,  1,  7],
			[ 9,  2,  1,  9],
			[13, 12,  1,  4],
			
			[14,  0,  1, 16],
		];
		
		var d = [
			[ 2,  1,  1,  6],
			[ 6,  7,  1,  8],
			[11,  3,  1,  7],
			
			[15,  0,  1, 16],
		];
		
		return fillBlocks([0, 0, 0, 0.4], d, fillBlocks([0, 0, 0, 0.2], l, solid(color)));
	}
	
	
	function leaves(color, background)
	{
		var leaveBlocks = [
			[ 0,  0,  3,  5], [ 3,  2,  3,  4], [ 9,  0,  4,  5],
			[ 2,  6,  3,  5], [ 5,  8,  5,  4], [11,  7,  5,  3],
			[ 1, 11,  5,  4], [ 7, 13,  5,  3], [13, 11,  3,  5]
		];
		
		return blocks(color, leaveBlocks, background);
	}
	
	function sapling(stem, leaves, background)
	{
		var leaveBlocks = [
			                  [ 3,  2,  3,  4], [ 9,  0,  4,  5],
							  [ 6,  5,  6,  3],
			[ 2,  6,  3,  5], [ 5,  8,  5,  4], [11,  7,  5,  3],
		];
		
		var stemBlocks = [
			[7, 10, 3, 6],
		];
		
		var stemTex = blocks(stem, stemBlocks, background);
		
		return blocks(leaves, leaveBlocks, stemTex);
	}
	
	
	function glass(background)
	{
		var blocks = [
			[ 0,  0, 16, 16],
			[ 2,  2, 12, 12],
		];
		return bevelBlocks(blocks, background);
	}
	
	
	function bricks(groutColor, brickColor)
	{
		
		var blocks = [
			        [0, 0, 7, 3], [8, 0, 7, 3],
			[0, 4, 3, 3], [4, 4, 7, 3], [12, 4, 4, 3],
			        [0, 8, 7, 3], [8, 8, 7, 3],
			[0, 12, 3, 3], [4, 12, 7, 3], [12, 12, 4, 3],
		];
		
		var bb = divideElements(blocks, 16);
		#for var b in blocks do bb.push(b[0]/32, b[1]/32, b[2]/32, b[3]/32);
		
		return function[groutColor, brickColor, bb]()
		{
			canvasUtil.setFillColor(groutColor);
			canvas.fillRect(0, 0, 1, 1);
			
			canvasUtil.setFillColor(brickColor);
			for var b in bb do
			{
				canvas.fillRect(b[0], b[1], b[2], b[3]);
			}
		};
		
	}
	
	function ore(color, background)
	{
		var oreBlocks = [
			[ 8,  2,  4,  5], 
			[ 2,  7,  4,  4],
		    [ 9, 10,  5,  4]
		];

		return blocks(color, oreBlocks, background);
	}
	
	function craftingTable(color, background)
	{
		var tableBlocks = [
			        [0, 0, 16, 4],
			[0, 4, 4, 12], [12, 4, 4, 12]
		];
		
		return blocks(color, tableBlocks, background);
	}
	
	function chest(color)
	{
		var woodenBlocks = [
			               [0, 0, 16, 4],
			[0, 4, 2, 12], [2, 4, 12, 12], [14, 4, 2, 12]
		];
		
		var knob = [
			[7, 2, 2, 5]	
		];
		
		var wooden = bevelBlocks(woodenBlocks, solid(color));
		return blocks([0.3, 0.3, 0.3], knob, wooden);
	}
	
	
	function stone(color)
	{
		# light blocks
		var l = [
			[2, 1, 9, 1],
			[5, 7, 11, 1],
			[0, 11, 7, 1], [13, 11, 3, 1],
			[7, 15, 5, 1],
			
			#[2, 2, 9, 1],
		];
		
		# dark blocks
		var d = [
			[9, 0, 4, 1],
			[5, 3, 9, 1],
			[0, 5, 3, 1], [12, 5, 4, 1],
			[2, 9, 10, 1],
			[1, 13, 13, 1],
			
			#[0, 6, 10, 2],
		];
		return fillBlocks([0, 0, 0, 0.1], d, fillBlocks([1, 1, 1, 0.2], l, solid(color)));
	}
	
	function dirt(color)
	{
		# light blocks
		var l = [
			[2, 1, 3, 1],
			[5, 7, 2, 1],
			[13, 10, 3, 1],
			[13, 11, 1, 2],
			[9, 15, 2, 1]
			
			#[2, 2, 9, 1],
		];
		
		# dark blocks
		var d = [
			[11, 0, 1, 2],
			[5, 3, 3, 1],
			[0, 5, 2, 1],
			[7, 8, 1, 2],
			[2, 13, 3, 1],
			
			#[0, 6, 10, 2],
		];
		return fillBlocks([0, 0, 0, 0.1], d, fillBlocks([1, 1, 1, 0.2], l, solid(color)));
	}
	
	function grown(color, background)
	{
		return function[color, background]()
		{
			background();
			
			canvasUtil.setFillColor(color);
			canvas.fillRect(0, 0, 1, 4/16);
			
			canvas.setFillColor(0, 0, 0, 0.2);
			canvas.fillRect(0, 3/16, 1, 1/16);
			
			canvas.setFillColor(0, 0, 0, 0.1);
			canvas.fillRect(3/16, 2/16, 1/16, 2/16);
			canvas.fillRect(7/16, 1/16, 1/16, 3/16);
			canvas.fillRect(9/16, 2/16, 1/16, 2/16);
			
			canvas.setFillColor(1, 1, 1, 0.2);
			canvas.fillRect(13/16, 0/16, 1/16, 2/16);
		};
	}
	
	
	function furnace(background)
	{
		# TODO	
	}
}
# namespace texture


