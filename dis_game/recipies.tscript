
namespace recipies
{
	# key: dimensions of recipe
	var registeredRecipes = {};
	
	
	class Recipe
	{
	public:
		var result, predicates;
	
		constructor(result, predicates)
		{
			this.result = result; this.predicates = predicates;
		}
		
		function checkAt(slots, xd, yd, li, ti, ri, bi)
		{
			var ii = li + ti*xd;
			var stride = xd-ri+li;
			var pi = 0;
			for var y in ti:bi do
			{
				for var x in li:ri do
				{
					if not predicates[pi](slots[ii]) then return false;
					
					ii += 1;
					pi += 1;
				}
				ii += stride;
			}
			return true;
		}
	}
	
	# arrayPredicates is an one dimensional array of length x*y
	function registerImpl(itemStack, xd, yd, arrayPredicates)
	{
		var dimensions = xd+"*"+yd;
		var arr = [];
		if registeredRecipes.has(dimensions) then
			arr = registeredRecipes[dimensions];
		else
			registeredRecipes[dimensions] = arr;
			
		arr.push([itemStack, arrayPredicates]);
	}
	
	# pattern: array of strings, each string represents a line in the crafting table
	function registerRecipe(amount, item, pattern, map)
	{
		var yd = pattern.size();
		assert(yd > 0, "Recipe pattern should not be empty");
		var xd = pattern[0].size();
		assert(xd > 0, "Recipe pattern should not be empty");
		for var l in pattern do
			assert(l.size() == xd, "Lines in recipe pattern should be of equal length");
		
		var arrayPredicates = [];
		for var l in pattern do
		for var c in l.split("") do
		{
			var pred = function(stack) { return stack == null; };
			if map.has(c) then
				pred = function[item=map[c]](stack) {
					if stack != null then return stack.item == item;
					return false;
				};
				
			arrayPredicates.push(pred);
		}	
		
		var itemStack = inventory.ItemStack(amount, item);
		
		
		registerImpl(itemStack, xd, yd, arrayPredicates);
	}
	
	
	function getRecipe(slots, xd, yd) {
		use namespace inventory.util;
		var o = occupiedRect(slots, xd, yd);
		if o == null then return null;
		var li = o[0], ti = o[1], ri = o[2], bi = o[3];
		var rxd = ri-li, ryd = bi-ti;
		
		var dimensions = rxd+"*"+ryd;
		if not registeredRecipes.has(dimensions) then return null;
		
		var recipes = registeredRecipes[dimensions];
		
		for var r in recipes do
		{
			if r.checkAt(slots, xd, yd, li, ti, ri, bi) then
				return r;
		}
		return null;
	}
	# consumes items in the item slots of the crafting slots
	##function consumeRecipe(slots, xd, yd) {}
	
	registerRecipe(4, blocks.planks,
		["X"],
		{X: blocks.log}
	);
}




