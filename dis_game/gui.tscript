#[section] fwd
namespace gui
{
	var guiScale = 32;
}

#[section] main
namespace gui
{
	
	# modal gui element
	var current = null;
	var backDirty = false;
	var modalDirty = false;
	#var dirty = false; # everything dirty?
	#function markCompletelyDirty() { dirty = true; }
	function markModalDirty() { modalDirty = true; }
	function markBackDirty() { backDirty = true; }
	
	function markScreenDirty()
	{
		backDirty = true;
		modalDirty = true;
		if current != null then current.onScreenChange();
	}
	
	function drawModalDisable()
	{
		canvas.reset();
		canvas.setFillColor(0, 0, 0, 0.3);
		canvas.fillRect(0, 0, canvas.width(), canvas.height());
	}
	function setModal(gui) # should there be a function pushModal
	{
		if current == null then
		{
			current = gui;
			current.onGotFocus();
			drawModalDisable();
			markModalDirty();
		}
		else
		{
			current.onLostFocus();
			current = gui;
			current.onGotFocus();
			markScreenDirty();
		}
	}
	
	function closeModal()
	{
		current.onLostFocus();
		initScale();
		markCompletelyDirtyScreen();
		current = null;

		gui.backDirty = false;
		gui.modalDirty = false;
	}
	
	#*class Point
	{
	public:
		var x, y;
		constructor(x, y) { this.x = x, this.y = y; }
	}*#
	
	# when an event returns true, the control is marked to be rerendered
	class Control
	{
	private:
		static var counter = 0;
	public:
		var id;
		var x, y;
		var width, height;
		var hasFocus = false;
		
		constructor(x=0, y=0, width=1, height=1)
		{
			counter += 1;
			this.id = String(counter); # string to be used in Dictionaries
			this.x = x; this.y = y;
			this.width = width;
			this.height = height;
		}
		
		function isInside(x, y)
		{
			# translate position
			x = x/guiScale-this.x; y = y/guiScale-this.y;
			
			if x >= 0 then if x < width then
			if y >= 0 then if y < height then return true;
			
			return false;
		}
		
		function onMouseDown(event) {}
		function onMouseMove(event) {}
		function onMouseUp(event) {}
		function onMouseOut(event) {}
		function onKeyDown(event) {}
		function onKeyUp(event) {}
		function onResize(event) {}
		function onTimer(event) {}
		
		function onGotFocus() { this.hasFocus=true; return true; }
		function onLostFocus() { this.hasFocus=false; return true; }
		
		function drawFocusRect()
		{
			if hasFocus then
			{
				var d = guiScale/26;
				var dd = d*2;
				
				canvas.setLineColor(1, 1, 1);
				canvas.setLineWidth(dd);
				canvas.rect(x*guiScale+d, y*guiScale+d, width*guiScale-dd, height*guiScale-dd);	
			}	
		}
		
		# used to cleanly render ontop of old image
		# this enshures, that the frame of the control looks nice
		function clearFrameBackground(parentDirty)
		{
			if parentDirty then return;
			#var l = Integer(x*guiScale), t = Integer(y*guiScale);
			#var r = -Integer(-(x+width)*guiScale), b = -Integer(-(y+height)*guiScale);
			
			canvas.setLineColor(0.2, 0.2, 0.2, 1);
			canvas.setLineWidth(2);
			#canvas.fillRect(l, t, r-l, b-t);
			canvas.frameRect(x*guiScale, y*guiScale, width*guiScale, height*guiScale);
		}
		
		function doCanvasShift()
		{
			canvas.shift(x*guiScale, y*guiScale);
		}
		
		function undoCanvasShift()
		{
			canvas.shift(-x*guiScale, -y*guiScale);
		}
		
		function render(parentDirty) {}
	}
	#class Control
	
	class ControlSlider : Control
	{
	public:
		var min, max, step;
		var value, lastValue;
		var buttonWidth;
		
		var onScroll, onChange;
		
		constructor(x=0, y=0, width=10, height=1,
					min=0, max=100, value=null, step=1,
					buttonWidth=0.35,
					onScroll=null, onChange=null)
			: super(x=x, y=y, width=width, height=height)
		{
			this.min = min; this.max = max; this.step = step;
			this.buttonWidth = buttonWidth;
			if value == null then this.value = min; else this.value = value;
			
			if onScroll == null then 
				this.onScroll = function(value){};
			else
				this.onScroll = onScroll;
				
				
			if onChange == null then 
				this.onChange = function(value){};
			else
				this.onChange = onChange;
		}
		
		function render(parentDirty)
		{
			clearFrameBackground(parentDirty);
			
			canvas.setFillColor(0.1, 0.1, 0.1);
			canvas.fillRect(x*guiScale, y*guiScale, width*guiScale, height*guiScale);
			
			drawFocusRect();
			
			doCanvasShift();
			canvas.setFillColor(1, 1, 1, 0.75);
			canvas.setFont("helvetica", 0.7*guiScale);
			if value > (min+max)/2 then
			{
				canvas.setTextAlign("left");
				canvas.text(0.15*guiScale, 0.15*guiScale, String(value));
			}
			else
			{
				canvas.setTextAlign("right");
				canvas.text(width*guiScale-0.15*guiScale, 0.15*guiScale, String(value));
			}
			undoCanvasShift();
			
			var ww = width-buttonWidth;
			var ll = (value-min)/(max-min)*ww;
			
			canvas.setFillColor(1, 1, 1);
			if hasFocus then
				canvas.fillRect((x+ll)*guiScale, (y+1/26)*guiScale, buttonWidth*guiScale, (height-2/26)*guiScale);
			else
				canvas.fillRect((x+ll)*guiScale, y*guiScale, buttonWidth*guiScale, height*guiScale);
		}
		
		function scrollTo(event)
		{
			var ww = width-buttonWidth;
			
			var v = math.min(math.max(min, (event.x/guiScale-buttonWidth/2-x)/ww*(max-min)+min), max);
			if step != 0 then
				v = Integer((v+step/2)//step)*step;
			if value != v then
			{
				value = v;
				onScroll(value);
				return true;
			}
		}
		
		function onMouseDown(event)
		{
			if lastValue == null then lastValue = value;
			return scrollTo(event);
		}
		
		function onMouseMove(event)
		{
			if event.buttons.size() >= 1 then
				return scrollTo(event);
		}
		
		function changeFinish()
		{
			if lastValue != null then
			if lastValue != value then
			{
				onChange(value);
				lastValue = null;	
			}
		}
		
		function onMouseUp(event)
		{
			var dirty = scrollTo(event);
			changeFinish();
			return dirty;
		}
		
		function onMouseOut(event)
		{
			changeFinish();
		}
		
		function onKeyDown(event)
		{
			if lastValue == null then lastValue = value;
			
			var s = math.max(step, 1);
			var v = value;
			if event.key == "ArrowLeft" then v = math.max(min, v-s);
			else if event.key == "ArrowRight" then v = math.min(max, v+s);
			if v != value then
			{
				value = v;
				onScroll(value);
				return true;
			}
		}
		
		function onKeyUp(event)
		{
			changeFinish();
		}
	}
	# class ControlSlider
	
	
	
	class ControlButton : Control
	{
	public:
		var caption;
		var onClick;
		var pressed, leftDown;
		
		constructor(caption, onClick,
					x=0, y=0, width=10, height=1)
			: super(x=x, y=y, width=width, height=height)
		{
			this.caption = caption;
			this.onClick = onClick;
			this.pressed = false;
			this.leftDown = false;
		}
		
		function render(parentDirty)
		{
			clearFrameBackground(parentDirty);
			
			if pressed then canvas.setFillColor(1, 1, 1);
			else            canvas.setFillColor(0.3, 0.3, 0.3);
			canvas.fillRect(x*guiScale, y*guiScale, width*guiScale, height*guiScale);
			
			drawFocusRect();
			
			doCanvasShift();
			if pressed then canvas.setFillColor(0, 0, 0);
			else            canvas.setFillColor(1, 1, 1);
			canvas.setFont("helvetica", 0.7*guiScale);
			canvas.setTextAlign("center");
			canvas.text(width/2*guiScale, 0.15*guiScale, caption);
			undoCanvasShift();
		}
		
		function onMouseDown(event)
		{
			if event.button == "left" then
			{
				pressed = true;
				leftDown = true;
				return true;
			}
		}
		
		function onMouseMove(event)
		{
			if leftDown then
			{
				var xx = event.x/guiScale - x, yy = event.y/guiScale - y;
				var nPressed = xx >= 0 and yy >= 0 and xx < width and yy < height;
				if nPressed != pressed then
				{
					pressed = nPressed;
					return true;
				}
			}
		}
		
		function onMouseUp(event)
		{
			if event.button == "left" then
			{
				if pressed then
				{
					onClick();
					pressed = false;
					leftDown = false;
					return true;
				}
				else
					leftDown = false;
			}
		}
		
		function onKeyUp(event)
		{
			if event.key == "Enter" then onClick();
		}
	}
	# class ControlButton
	
	class ControlList : Control
	{
	public:
		var entries;
		var currentIndex;
		
		var onSelect;
		
		var emptyText;
		var scrollPos=0;
		
		static var entryHeight = 0.9;
		
		constructor(entries = [], onSelect = null, emptyText = "",
					x=0, y=0, width=10, height=1)
			: super(x=x, y=y, width=width, height=height)
		{
			this.entries = entries;
			this.currentIndex = null;
			if onSelect == null then
				this.onSelect = function(i, value) {};
			else
				this.onSelect = onSelect;
			this.emptyText = emptyText;
		}
		
		function render(parentDirty)
		{
			clearFrameBackground(parentDirty);
			
			canvas.setFillColor(0.1, 0.1, 0.1);
			canvas.fillRect(x*guiScale, y*guiScale, width*guiScale, height*guiScale);
			
			doCanvasShift();
			canvas.setFont("helvetica", 2/3*guiScale);
			canvas.setTextAlign("left");
			
			if entries.size() == 0 then
			{
				canvas.setFillColor(0.5, 0.5, 0.5);
				canvas.text(0.15*guiScale, 0.15*guiScale, emptyText);
			}
			else
			{
				canvas.setFillColor(1, 1, 1);
				
				var maxEntries = Integer(height//entryHeight);
				for var y in 0:maxEntries do
				{
					var i = y+scrollPos;
					if i >= entries.size() then break;
					if i < 0 then continue;
					
					if i == currentIndex then
					{
						#canvas.setFillColor(1, 1, 1);
						canvas.fillRect(0, y*entryHeight*guiScale, width*guiScale, entryHeight*guiScale);
						canvas.setFillColor(0, 0, 0);
						canvas.text(0.125*guiScale, (0.125+y*entryHeight)*guiScale, entries[i]);
						canvas.setFillColor(1, 1, 1);
					}
					else
					{
						canvas.text(0.125*guiScale, (0.125+y*entryHeight)*guiScale, entries[i]);
					}
				}
			}
			undoCanvasShift();
		}
		
		function adjustScroll(keepRelative=false)
		{
			var maxEntries = Integer(height//entryHeight);
				
			if currentIndex-maxEntries+1 >= scrollPos then
			{
				scrollPos = currentIndex-maxEntries+2;
				if currentIndex == entries.size()-1 then scrollPos-=1;
				if keepRelative then currentIndex = scrollPos+maxEntries-1;
				return true;
			}

			if currentIndex <= scrollPos then
			{
				if currentIndex == 0 and scrollPos == 0 then return;
				scrollPos = math.max(0, currentIndex-1);
				if keepRelative then currentIndex = scrollPos;
				return true;
			}
		}
		
		function onMouseMove(event)
		{
			var indx = Integer((event.y/guiScale-y)//entryHeight)+scrollPos;	
			if indx < 0 or indx >= entries.size() then
			{
				if currentIndex != null then
				{
					currentIndex = null;
					return true;
				}
			}
			else
			{
				if currentIndex != indx then
				{
					currentIndex = indx;
					return true;
				}
			}
		}
		
		function onMouseOut(event)
		{
			if currentIndex != null then
			{
				currentIndex = null;
				return true;
			}
		}
		
		function onMouseUp(event)
		{	
			if currentIndex != null then
				onSelect(currentIndex, entries[currentIndex]);
		}
		
		function onKeyDown(event)
		{
			if currentIndex == null then currentIndex = 0;
			if event.key == "Enter" then
				onSelect(currentIndex, entries[currentIndex]);
			else if event.key == "ArrowUp" then
			{
				if currentIndex > 0 then
				{
					currentIndex -= 1;
					adjustScroll();
					return true;
				}
			}
			else if event.key == "ArrowDown" then
			{
				if currentIndex < entries.size()-1 then
				{
					currentIndex += 1;
					adjustScroll();
					return true;
				}
			}
		}
		
		var lt = 0;
		function onTimer(event)
		{
			if currentIndex == null then return;
			
			var t = time();
			if t-lt > 200 then
			{
				lt = t;
				return adjustScroll(keepRelative=true);
			}
		}
	}
	# class ControlList
	
	class ControlTextInput : Control
	{
	
	public:
		var text;
		var promptText;
		var maxChars;
		var onEnter;
		
		constructor(text="", promptText="", maxChars=20, onEnter=null,
					x=0, y=0, width=10, height=1)
			: super(x=x, y=y, width=width, height=height)
		{
			this.text = text;
			this.promptText = promptText;
			this.maxChars = maxChars;
			if onEnter == null then
				this.onEnter = function(text) {};
			else
				this.onEnter = onEnter;
		}
		
		function render(parentDirty)
		{
			clearFrameBackground(parentDirty);
			
			canvas.setFillColor(0.1, 0.1, 0.1);
			canvas.fillRect(x*guiScale, y*guiScale, width*guiScale, height*guiScale);
			
			drawFocusRect();
			
			doCanvasShift();
			var renderedText;
			if text.size() == 0 then
			{
				renderedText = promptText;
				canvas.setFillColor(0.5, 0.5, 0.5);
			}
			else
			{
				renderedText = text;
				canvas.setFillColor(1, 1, 1);
			}
			canvas.setFont("helvetica", 2/3*guiScale);
			canvas.setTextAlign("left");
			canvas.text(0.15*guiScale, 0.15*guiScale, renderedText);
			undoCanvasShift();
		}
		
		function onMouseDown(event)
		{
			if event.button == "left" then
			{
				var newText = prompt(promptText);
				if newText != null then
				{
					newText = newText[0:maxChars];
					if newText != text then
					{
						text = newText;
						onEnter(text);
						return true;
					}
					onEnter(text);
				}
			}
		}
		
		function onKeyDown(event)
		{
			if event.key.size() == 1 then
			{
				if text.size() < maxChars then
				{
					text += event.key;
					return true;
				}
			}
			else if event.key == "Backspace" or event.key == "ArrowLeft" then
			{
				if text.size() > 0 then
				{
					text = text[0:text.size()-1];
					return true;
				}
			}
			else if event.key == "Delete" then
			{
				if text.size() > 0 then
				{
					text = "";
					return true;
				}
			}
			else if event.key == "Enter" then
			{
				onEnter(text);
			}
		}
	}
	
	
	
	class ControlContainer : Control
	{
	public:
		var controls;
		var #*completelyDirty,*# dirtyControls;
		var currentIndex=null;
	
		constructor(x=0, y=0, width=1, height=1, controls=null)
			: super(x=x, y=y, width=width, height=height)
		{
			if controls == null then
				this.controls = [];
			else
				this.controls = controls;
				
			#this.completelyDirty = true;
			this.dirtyControls = {};
		}
# 		function markCompletelyDirty()
# 		{
# 			error("Forbidden");
# 			#completelyDirty = true;
# 		}
		function markDirty(index)
		{
			var c = controls[index];
			dirtyControls[c.id] = c;
			return true;
		}
		
		function markDirtyCtrl(c)
		{
			dirtyControls[c.id] = c;	
		}
		
		function updateCurrentControl(event, isMouseMove=false)
		{
			var dirty;
			
			var index=null;
			for var i in controls.keys() do
				if controls[i].isInside(event.x, event.y) then
					index = i;
			
			if currentIndex != index then
			{
				if currentIndex != null then
				{
					if isMouseMove then
					{
						if controls[currentIndex].onMouseOut(null)==true then
							dirty=markDirty(currentIndex);
					}
					
					if controls[currentIndex].onLostFocus()==true then
						dirty=markDirty(currentIndex);
				}
					
				currentIndex = index;
				
				if currentIndex != null then
					if controls[currentIndex].onGotFocus()==true then
						dirty=markDirty(currentIndex);
				
				return dirty;
			}
		}
		
		function onMouseDown(event)
		{
			event.x -= this.x*guiScale; event.y -= this.y*guiScale;
			if event.buttons.size() == 1 then
				updateCurrentControl(event);
					
			if currentIndex != null then
				if controls[currentIndex].onMouseDown(event)==true then
					return markDirty(currentIndex);
		}
		
		function onMouseMove(event)
		{
			event.x -= this.x*guiScale; event.y -= this.y*guiScale;
			if event.buttons.size() == 0 then
				updateCurrentControl(event, isMouseMove=true);
			
			if currentIndex != null then
				if controls[currentIndex].onMouseMove(event)==true then
					return markDirty(currentIndex);
		}
		
		function onMouseUp(event)
		{	
			event.x -= this.x*guiScale; event.y -= this.y*guiScale;
			
			if currentIndex != null then
				if controls[currentIndex].onMouseUp(event)==true then
					return markDirty(currentIndex);
		
		}
		function onMouseOut(event)
		{
			if currentIndex != null then
			{
				if controls[currentIndex].onMouseOut(null)==true then
					return markDirty(currentIndex);
					
				currentIndex = null;
			}
		}
		function onKeyDown(event)
		{
			if currentIndex != null then
				if controls[currentIndex].onKeyDown(event)==true then
					return markDirty(currentIndex);
		}
		function onKeyUp(event)
		{
			if currentIndex != null then
				if controls[currentIndex].onKeyUp(event)==true then
					return markDirty(currentIndex);
		}
		function onResize(event) {}
		function onTimer(event)
		{
			for var c in controls.values() do
				if c.onTimer(event)==true then
					return markDirty(currentIndex);
		}
		function render(parentDirty)
		{
			doCanvasShift();
			if #*completelyDirty or*# parentDirty then
			{
				for var c in controls.values() do
					c.render(true);
				#completelyDirty = false;
			}
			else
			{
				for var c in dirtyControls.values() do
					c.render(false);
				dirtyControls = {};
			}
			undoCanvasShift();
		}
	}
	# class ControlContainer
	
	
	class ModalGui : ControlContainer
	{
	public:
	
		function updateXY()
		{
			x = (canvas.width()/guiScale - width) / 2;
			y = (canvas.height()/guiScale - height) / 2;
		}
	
		constructor(width, height, controls=[])
			: super(width=width, height=height, controls=controls)
		{
			updateXY();
		}
		
		
		#*function setCanvasTransform()
		{
			var ww = width * guiScale;
			var hh = height * guiScale;
			
			var ll = (canvas.width() - ww) / 2;
			var tt = (canvas.height() - hh) / 2;
			
			canvas.reset();
			canvas.shift(ll, tt);
			canvas.scale(guiScale);
		}*#
		
		function onMouseDown(event)
		{
			if event.buttons.size() == 1 then
			if not this.isInside(event.x, event.y) then
				gui.closeModal();
				
			super.onMouseDown(event);
		}
	
		# specific ModalGui function
		# called when parent is resized
		function onScreenChange()
		{
			updateXY();
		}
	}
	
	class ModalDlg : ModalGui
	{
	public:
		var caption;
	
		constructor(caption, width, height, controls=[])
			: super(width=width, height=height, controls=controls)
		{
			this.caption = caption;
			updateXY();
		}
		
		function render(parentDirty)
		{
			if #*completelyDirty or*# parentDirty then
			{
				doCanvasShift();
				
				var gs = guiScale;
			
				#draw background
			
				canvas.setFillColor(0.2, 0.2, 0.2, 1);
				canvas.fillRect(0, 0, width*gs, height*gs);
				
				canvas.setFillColor(0.3, 0.3, 0.3, 1);
				canvas.fillRect(0, 0, width*gs, 1.75*gs);
				
				canvas.setFillColor(1, 1, 1, 1);
				canvas.setFont("helvetica", guiScale*0.8);
				canvas.setTextAlign("center");
				canvas.text(width/2*gs, 0.5*gs, caption);
				
				undoCanvasShift();
			}
			
			super.render(parentDirty);
		}
	}
}
# namespace gui
	
	
	
	
#[section] GuiSettings
namespace gui
{
	class GuiSettings : ModalDlg
	{
	public:
		
		constructor()
			: super(
				caption="Settings",
				width=10, height=7.2,
				controls={
					sclBlockSize: ControlSlider(
						x=0.5, y=3.2, width=9, 
						min=8, max=100, step=1,
						value=disp.dispScale,
						onChange=function(value)
						{
							disp.dispScale = value;
							initScale();
							markCompletelyDirtyScreen();
							gui.markBackDirty();
							#gui.markCompletelyDirty();
						}
					),
					sclGuiScale: ControlSlider(
						x=0.5, y=5.7, width=9, 
						min=16, max=80, step=1,
						value=guiScale,
						onChange=function(value)
						{
							guiScale = value;
							gui.markScreenDirty();
						}
					)
				}
			)
		{}
	
		function render(parentDirty)
		{
			super.render(parentDirty);
			
# 			print("Y");
			if #*completelyDirty or*# parentDirty then
			{
				doCanvasShift();
			
				var s = guiScale;
				
				#draw background
# 				canvas.setFillColor(0.2, 0.2, 0.2, 1);
# 				canvas.fillRect(0, 0, width*s, height*s);
				
# 				canvas.setFillColor(0.3, 0.3, 0.3, 1);
# 				canvas.fillRect(0, 0, width*s, 1.75*s);
				
				canvas.setFillColor(1, 1, 1, 1);
# 				canvas.setFont("helvetica", guiScale*0.8);
# 				canvas.setTextAlign("center");
# 				canvas.text(5*s, 0.5*s, "Settings");
				
				
				canvas.setFont("helvetica", guiScale*0.7);
				canvas.setTextAlign("left");
				canvas.text(0.5*s, 2.3*s, "Block Scale");
				
				canvas.text(0.5*s, 4.8*s, "Gui Scale");
			
				undoCanvasShift();
			}
			
			#drawFocusRect();
		}
	}
	
}
# namespace gui





