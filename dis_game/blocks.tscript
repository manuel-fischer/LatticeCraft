
var registeredBlocks = {};
function registerBlock(char, block)
{
	if registeredBlocks.has(char) then error("Character '" + char + "' already used");
	if block.char != null then error("Block already mapped to character");
	if char.size() != 1 then error("Block character should be of size 1");
	if "0" <= char and char <= "9" then error("Characters 0-9 reserved for numeric data"); # RLE and slot size in the inventory
	
	block.char = char;
	registeredBlocks[char] = block;
	return block;
}

namespace blocks
{

	class Block
	{
	public:
		var texture; # function()
		var render; # function()
		var drop;
		var dropChance;
		var solid; # can entities fall through or not
		var tick; # function(x, y)
		var place; # function(x, y) -> Boolean
		var update; # function(x, y) or null
		var onClick; # function(x, y)
		var hasBlockData; # like inventories for chests
		
		var char; # set by mapCharToBlock
		
		function renderItem()
		{ 
			textureState.renderSky = false;
			render();
			textureState.renderSky = true;
		}
		
		constructor(
			texture, 
			drop = true,
			dropChance = 1.0,
			solid = true,
			tick=null,
			place=null,
			update=null,
			onClick=null,
			hasBlockData=false
		) {
			this.render = texture;
			this.texture = texture;
			
			if drop == false then		this.drop = null;
			else if drop == true then	this.drop = this;
			else						this.drop = drop;
			
			this.dropChance = dropChance;
			
			this.solid = solid;
			
			if tick == null then
				this.tick = function(x, y) {};
			else
				this.tick = tick;
				
			if place == null then
				this.place = function[thisBlock = this](x, y) {
					theWorld.setBlockUpdate(x, y, thisBlock);
					return true;
				};
			else
				this.place = place;
				
			this.update=update;
			
			if onClick == null then
				this.onClick = function(x, y) {};
			else
				this.onClick = onClick;
				
			this.hasBlockData = hasBlockData;
		}
	}
}
# namespace blocks







